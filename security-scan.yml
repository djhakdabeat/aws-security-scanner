name: AWS Security Scanner CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pylint flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check code style
      run: |
        pylint aws_security_scanner.py --exit-zero
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    # Only run on main branch and if AWS credentials are available
    if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Run security scan
      run: |
        python aws_security_scanner.py --region us-east-1
    
    - name: Upload scan report
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-report
        path: aws_security_report_*.json
        retention-days: 30
    
    - name: Check for critical vulnerabilities
      run: |
        # Parse JSON report and fail if critical vulnerabilities found
        if grep -q '"severity": "CRITICAL"' aws_security_report_*.json; then
          echo "::error::Critical security vulnerabilities detected!"
          exit 1
        fi
